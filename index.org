:PROPERTIES:
:ID:       a7079bca-3f51-474f-8951-d171b4c137ba
:END:
#+Title: Introduction to Scripting for Scientists
#+Subtitle: A Very Brief Guide for the Intrepid Labratorian
#+Author: Delta Alexander Sharp
#+Email: nalisarc@gmail.com
#+STARTUP: beamer
#+STARTUP: indent
#+STARTUP: hidestars

* Checklist                                                        :noexport:

** DONE Draft

** TODO revise

*** TODO re-add sanguine slide

*** TODO add couple more slide demonstrating matplotlib

*** TODO extend further readings in notes

*** TODO glossary in notes

*** TODO bibliography in notes

* Setup                                                            :noexport:
#+begin_src ipython :session i2sc  
%matplotlib inline
import matplotlib.pyplot as plt
import numpy as np
import random 
#+end_src

#+RESULTS:
: # Out[1]:

#+name: org-ref-csl-preprocess
#+begin_src emacs-lisp
(add-hook 'org-export-before-parsing-hook 'org-ref-csl-preprocess-buffer)
#+end_src

#+RESULTS:
| org-ref-csl-preprocess-buffer | org-attach-expand-links |

 
#+begin_src emacs-lisp
(add-to-list 'org-latex-minted-langs '(ipython "python"))
#+end_src

#+RESULTS:
| ipython      | python      |
| emacs-lisp   | common-lisp |
| cc           | c++         |
| cperl        | perl        |
| shell-script | bash        |
| caml         | ocaml       |


** Export Setting                                                  :noexport:
#+DESCRIPTION: 
#+KEYWORDS: 
#+LANGUAGE:  en
#+OPTIONS:   H:2 num:t toc:t \n:nil @:t ::t |:t ^:t -:t f:t *:t <:t
#+OPTIONS:   TeX:t LaTeX:t skip:nil d:nil todo:t pri:nil tags:not-in-toc
#+INFOJS_OPT: view:nil toc:nil ltoc:t mouse:underline buttons:0 path:https://orgmode.org/org-info.js
#+EXPORT_SELECT_TAGS: export
#+EXPORT_EXCLUDE_TAGS: noexport
#+HTML_LINK_UP:
#+HTML_LINK_HOME:
#+beamer_theme: Madrid
#+LATEX_HEADER: \usepackage{tikz}
#+LATEX_HEADER: \usetikzlibrary{positioning}
#+COLUMNS: %40ITEM %10BEAMER_env(Env) %9BEAMER_envargs(Env Args) %4BEAMER_col(Col) %10BEAMER_extra(Extra)


** Exporter                                                        :noexport:

Replace the exporter with the desired one and then just export as latex-beamer~
#+call: beamer-export()


*** Beamer Setting                                                 :noexport:
Run this block to export as standard beamer presentation
#+name: beamer-export
#+begin_src org
,#+LaTeX_CLASS: beamer
,#+LaTeX_CLASS_OPTIONS: 
,#+OPTIONS: H:2
#+end_src

*** Handout Setting                                                :noexport:
Run this block to export it with my extra notes but no animation.
#+name: handout-export
#+begin_src org
,#+OPTIONS: H:2
,#+LaTeX_CLASS: beamer
,#+LaTeX_CLASS_OPTIONS: [handout]
,#+LATEX_HEADER: %%% For handouts with lots of extra notes
,#+LATEX_HEADER: \documentclass[handout]{beamer}
,#+LATEX_HEADER: \usepackage{pgfpages}
,#+LATEX_HEADER: \pgfpagesuselayout{2 on 1}[a4paper,border shrink=5mm] % could also use letterpaper
,#+LATEX_HEADER: \setbeameroption{show notes on second screen=bottom} % Beamer manual, section 19.3
,#+LATEX_HEADER: %%%
,#+LATEX_HEADER: 
,#+LATEX_HEADER: \setbeamertemplate{note page}[plain] % Beamer manual, section 19.1
,#+LATEX_HEADER: \newlength{\parskipbackup}
,#+LATEX_HEADER: \setlength{\parskipbackup}{\parskip}
,#+LATEX_HEADER: \newlength{\parindentbackup}
,#+LATEX_HEADER: \setlength{\parindentbackup}{\parindent}
,#+LATEX_HEADER: \newcommand{\baselinestretchbackup}{\baselinestretch}
,#+LATEX_HEADER: \usetemplatenote{\rmfamily \scriptsize%
,#+LATEX_HEADER:   \setlength{\parindent}{1em} \setlength{\parskip}{1ex}%
,#+LATEX_HEADER:   \renewcommand{\baselinestretch}{1}%
,#+LATEX_HEADER:   \noindent \insertnote%
,#+LATEX_HEADER: 
,#+LATEX_HEADER:   \setlength{\parskip}{\parskipbackup}%
,#+LATEX_HEADER:   \setlength{\parindent}{\parindentbackup}%
,#+LATEX_HEADER:   \renewcommand{\baselinestretch}{\baselinestretchbackup}%
,#+LATEX_HEADER: }
#+end_src


* Introduction
** Who am I?
***                                                                 :B_block:
:PROPERTIES:
:BEAMER_env: block
:END:
#+begin_center
I'm Delta Alexander Sharp (they/them.)\\
Mad scientist extraordinaire. 
#+end_center
**** Experience                                                       :BMCOL:
:PROPERTIES:
:BEAMER_col: 0.6
:END:
 - I've been programming since 2014 specializing in:
   - Data Science
   - Embedded Devices
   - Reproducible Research
 - I've written multiple pieces of internal business software which have increased productivity.
**** Photo                                                            :BMCOL:
:PROPERTIES:
:BEAMER_col: 0.3
:END:
[[./media/images/photo_2021-08-02_15-34-37.jpg]]

** Discussion Expectations
*** What we'll be covering     
 - What is programming / scripting.
 - How computers represent things. 
 - How scripting can make your work more reproducible.
 - Why introducing scripts can make your work easier as a scientist.

** On Jargon
It can be intimidating learning new skills with lots of jargon.
*** Computer Science  is racked full of jargon
**** Examples of Jargon                                      :B_example:BMCOL:
:PROPERTIES:
:BEAMER_ENV: exampleblock
:BEAMER_col: 0.5
:END:
 - Strings, floats, dictionaries
 - Sequences, maps, iterators
 - Functions, class, objects
 - URL, API, blobs
**** Jargon Goblin                                                    :BMCOL:
:PROPERTIES:
:BEAMER_col: 0.3
:END:
#+ATTR_LATEX: :height 3cm
#+caption: A jargon goblin
[[./media/images/2023-03-31_19-51-58_screenshot.png]]


** What Is Programming?



*** Program                                                    :B_definition:
:PROPERTIES:
:BEAMER_env: definition
:END:
A set of instructions interpreted by a computer.


 
*** Script                                                     :B_definition:
:PROPERTIES:
:BEAMER_env: definition
:END:
A program that typically:
 - Specialized to a task
 - Has minimal user interaction
 - Can be called from the shell or other programs
   

   

** How do you talk to computers?
Modern computers run an operating system (OS)\\
used to schedule programs.

*** Kernel                                                     :B_definition:
:PROPERTIES:
:BEAMER_env: definition
:END:
The core of the OS, interacts with the machine.
*** Shell                                                      :B_definition:
:PROPERTIES:
:BEAMER_env: definition
:END:
The part of the OS that exposes the kernel to the user.

*** Desktop Environment                                        :B_definition:
:PROPERTIES:
:BEAMER_env: definition
:END:
A program that represents the shell graphically.


* Computers are a revolutionary tool

** Computers can handle Massive data sets 
:PROPERTIES:
:BEAMER_opt: shrink=15
:END:

The human genome is made up of 3.2 billion base pairs [[cite:&Toledo_C_2012]].

*** Exercise: How big is that?                                      :B_block:
:PROPERTIES:
:BEAMER_env: block
:END:

How long would it take to transcribe at:\\
60 words per minute taking 8 hour days [[cite:&Toledo_C_2012]]?

**** Answers                                                          :BMCOL:
:PROPERTIES:
:BEAMER_col: 0.5
:END:
 - A. 1 year
 - B. 100 years
 - C. @@beamer:{\color<2>[rgb]{0,0.6,0}@@50 years@@beamer:}@@
 - D. 30 years

**** Picture                                                          :BMCOL:
:PROPERTIES:
:BEAMER_col: 0.5
:END:

#+DOWNLOADED: screenshot @ 2023-04-25 17:33:24
[[file:./media/images/2023-04-25_17-33-24_screenshot.png]]


*** Rapid Sequencing                                         :B_exampleblock:
:PROPERTIES:
:BEAMER_env: exampleblock
:END:
Stanford scientists sequenced a human genome in just over 5 hours [[cite:&Armitage_H_2012]]!


** Alright, I'll Byte
*** Bit                                                  :B_definition:
:PROPERTIES:
:BEAMER_env: definition
:END:
A bit is an object,that can be in one of two states.
 - on or off
 - 1 or 0
 - True or False
*** Byte                                                       :B_definition:
:PROPERTIES:
:BEAMER_env: definition
:END:
A byte is a sequence of 8 bits.
*** Blob / Binary                                            :B_definition:
:PROPERTIES:
:BEAMER_env: definition
:END:
An arbitrarily large sequence of bytes.
*** Terminology                                                    :B_note:
:PROPERTIES:
:BEAMER_env: note
:END:
Blob is a term from database administration, and you don't tend to
see it outside of that field.
** Computers represent things using bytes
Using a large number of bytes you can represent all sorts of things:
*** Examples                                           :B_exampleblock:
:PROPERTIES:
:BEAMER_env: exampleblock
:END:
**** table                                                            :BMCOL:
:PROPERTIES:
:BEAMER_col: 0.5
:END:
 - Text, numbers, tables
 - Images, music, videos
 - Programs, databases, hardware
**** photo                                                            :BMCOL:
:PROPERTIES:
:BEAMER_col: 0.5
:END:
#+DOWNLOADED: screenshot @ 2023-04-25 17:56:06
[[file:./media/images/2023-04-25_17-56-06_screenshot.png]]


*** Computers don't understand data!                                :B_block:
:PROPERTIES:
:BEAMER_env: block
:END:
Computers only see and work on these blobs.
 - The meaning comes from people.

** Scales of Information
Scale is described using SI notation.

*** Common prefixes                                           :B_block:BMCOL:
:PROPERTIES:
:BEAMER_env: block
:BEAMER_col: 0.4
:END:


| Prefix    | number of bits |
|-----------+----------------|
|           |              1 |
|-----------+----------------|
| Kilo (kb) |           1e+3 |
|-----------+----------------|
| Mega (mb) |           1e+6 |
|-----------+----------------|
| Giga (gb) |           1e+9 |
|-----------+----------------|
| Tera (tb) |          1e+12 |

*** Examples of files sizes                            :B_exampleblock:BMCOL:
:PROPERTIES:
:BEAMER_env: exampleblock
:BEAMER_col: 0.6
:END:

| File type    | typical size   |
|--------------+----------------|
| Images       | ~2kb - 1000kb  |
|--------------+----------------|
| Documents    | ~4kb - 5mb     |
|--------------+----------------|
| Music        | ~3mb - 4mb     |
|--------------+----------------|
| Video        | ~4gb - 20gb    |
|--------------+----------------|
| Genomic Data | ~100mb - 100tb |

** Data analysis and visualization

*** People are natural story tellers
 Real world data rarely tells neat stories.

*** Analysis finds the story
Statistical calculations sleuth out the who, what, when, where, why.
*** Visualization tells it
Tables and charts show the story in a way people can understand.
** Example: Sanguine
*** Blood Transfusion is a Complex Problem                        :B_block:
:PROPERTIES:
:BEAMER_env: block
:END:
Transfusion is a powerful tool that has saved countless lives.
**** 
However as with any clinical procedure comes with risk such as
transfusion-associated circulatory overload (TACO), which occurs when blood volumes become too high and
can lead to pulmonary edema [[cite:&Carrigan_K_2023]].
** Sanguine (cont.)
#+caption: (Carrigan 2023)
[[./media/images/data-vis-1.jpg]]

** Data visualization tips
Strive for accessible visualizations!
*** Do!                                              :B_exampleblock:BMCOL:
:PROPERTIES:
:BEAMER_env: exampleblock
:BEAMER_col: 0.5
:END:
 - Use patterns and shapes in addition to color
 - Use labels and legends
 - Translate the data into clear language
 - Provide context; explain the visualization



*** Don't!                                                          :BMCOL:
:PROPERTIES:
:BEAMER_env: alertblock
:BEAMER_col: 0.5
:END:
 - Rely on color to explain data
 - Use very bright or low-contrast colors
 - Hide important data behind interactions
 - Overwhelm the user with information
 #+latex: \vspace{1mm}
*** Reference
https://fossheim.io/writing/posts/accessible-dataviz-design/

** Computers and people solve problems differently
People are natural problem solvers, whereas computer need direction.

*** Image Recognition                                           :B_example:
:PROPERTIES:
:BEAMER_env: example
:END:


****                                                               :BMCOL:
:PROPERTIES:
:BEAMER_col: 0.45
:END:
People automatically pick details out of images:
 - Color
 - Shapes
 - Animals
 - Text
**** image                                                         :BMCOL:
:PROPERTIES:
:BEAMER_col: 0.40
:END:
 
 #+Beamer: \only<1>{
 #+caption: Spike Chunsoft (2009)
 [[./media/images/L0yCfOK.jpeg]]
 #+Beamer: }\only<2>{
 #+caption: Spike Chunsoft (2009)
 [[./media/images/photo_2023-03-28_21-26-16_edit.jpg]]
 #+Beamer: }
** Computers are precise and repeatable    
*** Computers designed to be deterministic                          :B_block:
:PROPERTIES:
:BEAMER_env: block
:END:
 - They do exactly what you tell them
 - As many times as you need
 - Whenever you want them to

*** Ideal use cases for computers                                   :B_block:
:PROPERTIES:
:BEAMER_env: block
:END:
- Text manipulation
- Time-stamping
- Continuous monitoring
- Counting and sorting



** Computers have Consequences
*** Computers are complex systems                                   :B_block:
:PROPERTIES:
:BEAMER_env: block
:END:
Computers are run on physical machines, opening them up to intermittent errors.
 - Memory leaks
 - Buffer overflows
 - Hanging or freezing

Resetting the machine generally returns it to a known state.
*** Virtual Machines                                               :B_note:
:PROPERTIES:
:BEAMER_env: note
:END:
Computers can simulate smaller computers.
 - This is called virtualization or emulation

Virtual machines can be used to run complex software consistently or to isolate
systems from each other.


** Computers are fallible!                           
*** Malformed and malicious code                             :B_alertblock:
:PROPERTIES:
:BEAMER_env: alertblock
:END:
 - Computers can and *will* destroy themselves.
 - Bad code can and *will* be exploited.
 - Networks scale damage up *exponentially*!

***  General advice                                          :B_exampleblock:
:PROPERTIES:
:BEAMER_env: exampleblock
:END:
That being said, *every* tool can be misused.
 - Don't use admin accounts for daily use.
 - Don't use personal computers for work.
 - Don't use work computers for personal reasons.
 - Don't plug non-secure devices into secure ones.
 - If it doesn't need a network connection; don't connect it.




** Scripting allows you to redo you work easily             
Reusing code can let you standardize and automate your workflow.

*** Pasteurization Report Generator                       :B_example:
:PROPERTIES:
:BEAMER_env: example
:END:
A previous employer pasteurized breast-milk for at-risk newborns.
#+latex: \vfill
PRG:
 - took daily raw data and separated into batches
 - validated that batch met critical control points
 - produced reports for each batch for analysis.

   
** Version Control (VC)
Collaborating with colleagues is a non trivial problem.

*** People Problems                                           :B_block:BMCOL:
:PROPERTIES:
:BEAMER_col: 0.5
:BEAMER_env: block
:END:
 - Overwriting each other's work
 - Stale and out-of-date copies
 - Breaking changes
 - Crediting contributions
*** VC to the rescue!                                         :B_block:BMCOL:
:PROPERTIES:
:BEAMER_col: 0.5
:BEAMER_env: block
:END:
 - Track changes
 - Ensures changes are current
 - Revert broken commits
 - Access control, and logging
*** Version control programs
 - Git
 - Subversion
 - Rsync
 - Mastercontrol
*** Git                                                              :B_note:
:PROPERTIES:
:BEAMER_env: note
:END:
Git is a complex program that is unfriendly to new users.
To give it proper coverage would require another discussion.


** In short:
Computers can make your work more robust and reproducible.
*** Science is based on reproducibility!
How do you find out how the world works?
 - Observe:\\
   What are you interested in learning?
 - Hypothesize:\\
   What do you think is happening?
 - Test:\\
   Cast your ideas to the crucible! 
 - Document and Share:\\
   Show your work!



* Getting Started with Python

** Installing Python
You can download the latest version of python at:
https://www.python.org/downloads/

#+DOWNLOADED: screenshot @ 2023-04-12 20:57:28
[[file:./media/images/2023-04-12_20-57-28_screenshot.png]]


*** Python2 vs Python3                                               :B_note:
:PROPERTIES:
:BEAMER_env: note
:END:
Python code is usually backwards compatible with some exceptions.

The most major break between versions was the division between python2 and python3.

Some older projects require python2, however there is no legitimate reason to build
new projects using it.


*** Anaconda                                                         :B_note:
:PROPERTIES:
:BEAMER_env: note
:END:
Many in the scientific community use the Anaconda ecosystem.

Anaconda bundles many useful applications for research but is beyond the scope
of this discussion.

*** Different Flavors of Python                                      :B_note:
:PROPERTIES:
:BEAMER_env: note
:END:
The most common flavor of python is CPython, but other versions exist such as:
 - PyPy
 - Ironpython
 - Jython

Generally python code is compatible with all flavors, but there might be
complications with more complex modules.

*** Follow the $PATH                                                 :B_note:
:PROPERTIES:
:BEAMER_env: note
:END:
When you run a command in the shell it looks up the location
of the program using the PATH environment variable.

Programs not in the PATH can't be found automatically by the shell,
which can cause headaches.



** Launching Python
After installing, python can be launched from the command line:

*** Windows                                                 :B_example:
:PROPERTIES:
:BEAMER_env: example
:END:
#+DOWNLOADED: screenshot @ 2023-04-12 21:43:49
[[file:./media/images/2023-04-12_21-43-49_screenshot.png]]

*** Using the REPL (Read, evaluate, print, loop)
 1. Enter a valid python command
 2. Press enter / return
    - The result is printed to next line of the console
 3. To quit type =exit() + return= or =CTRL-D= 

*** ipython                                                          :B_note:
:PROPERTIES:
:BEAMER_env: note
:END:
There are other python interpreters with my personal favorite being ipython.
Ipython has many quality of life improvements like magic methods, inline images,
pretty printing, and auto-complete.

While these improvements aren't strictly necessary, they can make your
life as a scientist much easier.

** Integrated Development Environments (IDEs)
While the REPL is useful, it often isn't practical to program excusively using it.
Integrated development evironments offer many quality of life improvements.

*** Pros of IDEs                                     :B_exampleblock:BMCOL:
:PROPERTIES:
:BEAMER_col: 0.5
:BEAMER_env: exampleblock
:END:
- Autocomplete
- Integrated shell
- Build tools
- Version control

*** IDE examples                                     :B_exampleblock:BMCOL:
:PROPERTIES:
:BEAMER_col: 0.5
:BEAMER_env: exampleblock
:END:
- Emac
- Pycharm
- Spyder
- VSCode



** Types and how things are represented
Built into python are a few representations of things.
These things are called *objects*, which can have different *types*
*** Common Types
 - Numeric:\\
   Integers, Floating Points, Complex Numbers
 - Sequence and mappings:\\
   Lists, Tuples, Strings, Dictionaries, Ranges
 - Functions:\\
   Code you want to reuse
 - Classes and objects:\\
   Bundles of code and data

** Numeric
Python has three built in ways of representing numbers:

*** Types of Built in Numbers                                :B_exampleblock:
:PROPERTIES:
:BEAMER_env: exampleblock
:END:
 1. Integers (int)
    - Whole numbers.
    - Infinite precision.
 2. Floating point (float)
    - Decimals (but in base 2)
    - precision limited by hardware.
 3. Complex number (complex)
    - exists on the complex plane.
    - has a real and an imaginary part.  
    - can have both float and int parts.
      
*** Numerical Bases and You                                          :B_note:
:PROPERTIES:
:BEAMER_env: note
:END:
People tend to count in decimal, a system using ten symbols (0-9) to represent numbers.
However this system is completely arbitrary.

People have counted in many different bases such as:
 - Binary (base 2)
 - Octal (base 8)
 - Duodecimal (base 12)
 - Hexadecimal (base 16)
 - Sexagesimal (base 60)

Each having its own distinct advantages and disadvantages.



** Precision, Accuracy, and Uncertainty
It can be tempting to think that computers are better at math than people.
*** Consider the following:                                         :B_block:
:PROPERTIES:
:BEAMER_env: block
:END:
Computers have a limited memory to represent numbers with.\\
**** Code                                              :B_exampleblock:BMCOL:
:PROPERTIES:
:BEAMER_env: exampleblock
:BEAMER_col: 0.4
:END:

#+name: floating_point_error_demo
#+begin_src ipython :session i2sc :results output raw :exports code :noeval 
a = 1.2
b = 1.0

print(a - b)
#+end_src


**** What result do you expect?                               :B_block:BMCOL:
:PROPERTIES:
:BEAMER_env: block
:BEAMER_col: 0.45
:END:
 - A. 0.20000000000000000
 - B. @@beamer: {\color<2>[rgb]{0,0.6,0}@@0.19999999999999996@@beamer:}@@
 - C. 1.00000000000000001
 - D. 0.19999999999999999

*** Garbage in, garbage out!                                   :B_alertblock:
:PROPERTIES:
:BEAMER_env: alertblock
:END:
Remember to account for the uncertainty or you'll end up with mysterious errors and useless data.



** Sequences and Collections
Sometimes, you need to store a bunch of things together:

*** List                                                          :B_example:
:PROPERTIES:
:BEAMER_env: example
:END:
A mutable (update-able) collection of objects.
#+begin_src ipython
example_list = ['a','b','c','d']
#+end_src

*** Tuple                                                         :B_example:
:PROPERTIES:
:BEAMER_env: example
:END:
A frozen (non-update-able) collection of objects.
#+begin_src ipython :noeval 
example_tuple = (1,2,3,4)
#+end_src

*** Dictionary                                                     :B_example:
:PROPERTIES:
:BEAMER_env: example
:END:
A collection of key, value pairs (mappings.)
#+begin_src ipython :noeval 
example_dict = {"key1": 123, "key2": "abc"}
#+end_src


*** Dictionaries and hashes                                           :B_note:
:PROPERTIES:
:BEAMER_env: note
:END:
Dictionary can only be made from hash-able objects.

Hashing is a type of mathematical operation that takes an input
producing a unique output of a uniform size.

Hashing is an asymmetrical operation, meaning that it is very
difficult to figure out what made a specific hash.

Only frozen or unmutable objects can be hashed, because any change
creates a new hash.

Hashes have many uses including:
 - verifying file integrity
 - storing passwords safely
 - caching
 
** Strings

*** Computers store textual data as strings           
Strings are a collection of symbols including:
 - letters
 - numbers
 - punctuation
 - control sequences

*** Example   
| H | E | L | L | O |   | W | O | R | L |  D |  ! |
|---+---+---+---+---+---+---+---+---+---+----+----|
| 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 |

** Paths and URLS
How do you represent where a file or resource is?
*** Uniform Resource Locator (URL)                           :B_definition:
A string showing:
:PROPERTIES:
:BEAMER_env: definition
:END:
 - Protocol :: What language to use
 - Domain :: Which machine to talk to
 - Path :: Where a resource is
*** Path                                                     :B_definition:
:PROPERTIES:
:BEAMER_env: definition
:END:
A string telling the machine where a resource is located.
** Types of paths
There are two types of paths:
*** c                                                               :BMCOL:
:PROPERTIES:
:BEAMER_col: 0.6
:END:

**** Absolute Path                                  :B_exampleblock:
:PROPERTIES:
:BEAMER_env: exampleblock
:END:
- Exact
- Inflexible
#+begin_example
/home/delta/Desktop/example.org
#+end_example
**** Relative Path                                        :B_exampleblock:
:PROPERTIES:
:BEAMER_env: exampleblock
:END:
- Relative
- Flexible
(Assuming CWD: =/home/delta/=)
#+begin_example
./Desktop/example.org
#+end_example
*** d                                                               :BMCOL:
:PROPERTIES:
:BEAMER_col: 0.4
:END:
[[./media/images/piratemap.png]]
** Classes and objects

To define a custom object, you use a class.
Classes allow you to bundle code and data as a single object.

*** Class                                                         :B_example:
:PROPERTIES:
:BEAMER_env: example
:END:
#+begin_src ipython
class ExampleClass:
    def __init__(self, args):
        self.args = args
        self.bar = "Hello World!!"

    def foo(self):
        print(self.bar)

example = ExampleClass("Hi")
#+end_src

*** endblock                                                :B_ignoreheading:
:PROPERTIES:
:BEAMER_env: ignoreheading
:END:
You can keep multiple independant copies of an object, allowing for
problems to be encapsulated and isolated. 



*** Inheritance                                                      :B_note:
:PROPERTIES:
:BEAMER_env: note
:END:
Objects can be based on other objects.

This allows for more complex functionality to be built on top
of simpler objects.


** Conditional Logic
The real power of programming comes from the ability to define
logical conditions.

*** Example
#+begin_src ipython :noeval 
name = input("What's your name? ")

if len(name) > 10:
    print("Wow that's a long name!")
elif len(name) <= 10 and len(name):
    print(f"Hi {name}!")
else:
    print("Sorry didn't catch that!")
#+end_src



** Reusing Code: Modules and Libraries
Modules allow you to share python programs and libraries and use them in your
projects.

*** Using modules                                            :B_exampleblock:
:PROPERTIES:
:BEAMER_env: exampleblock
:END:
#+begin_src ipython :noeval 
#import a module
import random
#import a specific submodule
from random import randint
#import all the submodules
from random import *
#+end_src



*** endblock                                                :B_ignoreheading:
:PROPERTIES:
:BEAMER_env: ignoreheading
:END:
By using modules you don't need to reinvent the wheel every time you want
to make something.

** Installing new Modules
To install a new module you use the command-line program ~pip~:
*** Using pip                                                     :B_example:
:PROPERTIES:
:BEAMER_env: example
:END:
#+begin_src bash :noeval 
pip install numpy
pip uninstall numpy
#+end_src

*** Security Considerations                                          :B_note:
:PROPERTIES:
:BEAMER_env: note
:END:
Unfortunately there are malicious actors out there that make evil modules.
Often times these are made to imitate a popular library like requests.

These modules when installed turn your project into a Trojan horse,
and your computer is troy.

Make sure to verify that a package is what it says it is before using it.


*** Virtualenv and isolation                                         :B_note:
:PROPERTIES:
:BEAMER_env: note
:END:
Pip installs packages to a common location by default.
This often is desired, but sometimes programs will use incompatible versions
or break system tools.

To avoid this, it is recommended to set up a virtual environment (virtualenv)
and installing the packages there.

Tools such as ~pipx~ or ~pipenv~ can automate this for you.

** Common 3rd party libraries for science
 - Numpy: \\
   Handle large arrays efficiently
 - Scipy: \\
   Useful mathematical and scientific functions.
 - Sympy : \\
   Symbolic mathematics.
 - Pandas : \\
   Handle datasets with ease.
 - Matplotlib: \\
   Create graphs, charts, and figures.
 - Pint: \\
   Ensures your math takes units into account.

** Why not use office software?
While spreadsheet programs are useful tools, they aren't built for scientific work.
*** Autocorrect mangles data
30% of published papers contain mangled gene names in supplimentary data [[cite:&Lewis_d_2021]].

*** Can't handle large datasets
Excel has a limit of 1,048,576 rows and 16,384 columns per sheet [[cite:&MS_Excel_Spec]].

*** Bulky
When dealing with larger datasets, typical spreadsheet software can become unresponsive.


** Jupyter
Jupyter notebooks allow for you to define create documents that weave code and data together.

[[./media/images/Screenshot from 2023-05-26 18-33-51.png]]

** Jupyter (cont.)
Jupyter notebooks have many benefits including:
- Live and reactive plots
- Directly interact with APIs
- Sharable format


* Conclusion

** Learning to program is hard, but you can do it.
Learning is a physical process that takes time and energy.
*** When you encounter trouble                                :B_block:
At somepoint, you *will* hit a metaphorical brick wall.
****                                                                  :BMCOL:
:PROPERTIES:
:BEAMER_col: 0.65
:END:


 - Take a break and re-evaluate the problem
   - What are you trying to do?
   - Are you asking the right question?
 - Double check your steps
   - Trace-back messages are cryptic at first.
   - Learn to read them for invaluable feedback.
 - Try duck debugging!
   - Explain what you're working on to a rubber duck.
   - While silly it helps more often than not.

****                                                                  :BMCOL:
:PROPERTIES:
:BEAMER_col: 0.35
:END:
#+DOWNLOADED: screenshot @ 2023-04-15 19:59:12
[[file:./media/images/2023-04-15_19-59-12_screenshot.png]]


** Ask for help when you need it!

*** Community Forums
Communities like [[https:stackoverflow.com][stackoverflow.com]] exist for asking and answering questions.

**** Before asking                                       :B_alertblock:BMCOL:
:PROPERTIES:
:BEAMER_col: 0.5
:BEAMER_env: alertblock
:END:
Badly formed questions are only going frustrate people.
 - What are you trying to do?
 - What is happening?
 - What steps have you tried?
   

****                                                                  :BMCOL:
:PROPERTIES:
:BEAMER_col: 0.4
:END:

#+DOWNLOADED: screenshot @ 2023-04-15 20:47:36
[[file:./media/images/2023-04-15_20-47-36_screenshot.png]]

** Embrace mistakes when learning


*** Fail fast; fail often
You will make mistakes, that's part of the learning process.
**** List                                                             :BMCOL:
:PROPERTIES:
:BEAMER_col: 0.5
:END:
 - Don't be afraid of being wrong!
 - Iterate on your previous work!
 - Keep it simple!
 - Document your progress!
 - How do others approach this?
 - Build tests to verify your results!

**** Figure                                                           :BMCOL:
:PROPERTIES:
:BEAMER_col: 0.5
:END:
#+begin_src ipython :session i2sc :ipyfile ./media/images/faround.png :results raw :exports results :cache yes 
with plt.xkcd():
    fig = plt.figure()
    ax = fig.add_axes((0, 0, 1, 1))
    ax.set_xticks([])
    ax.set_yticks([])
    ax.spines[['top', 'right']].set_visible(False)
    ax.set_xlabel("Screw around")
    ax.set_ylabel("Find out")

    
    ax.annotate(
        'HOW MUCH YOU LEARN!',
        xy=(5, 5), arrowprops=dict(arrowstyle='->'), xytext=(5, 4))

    

    ax.plot(range(10))

     
    plt.show()
#+end_src

#+RESULTS[dda27abd3b7e5c5fb09de8f6878e1e2015f243cf]:
[[file:./media/images/faround.png]]



** Still not convinced?
This presentation was prepared using the techniques discussed.
*** Tools used                                               :B_exampleblock:
:PROPERTIES:
:BEAMER_env: exampleblock
:END:
 - emacs
   - orgmode
   - org-ref
 - latex
   - bibtex
   - beamer
   - tikz
 - python
   - matplotlib
     
*** Source
You can find the source document here:
https://github.com/Nalisarc/intro-to-scripting

** Summary
Computers are powerful tools that can greatly improve your
work as a scientist.

** Prompt for questions
Thank you for your attention!

Additional questions can be sent to:
nalisarc@gmail.com
#+DOWNLOADED: screenshot @ 2023-04-15 19:52:50
#+ATTR_LATEX: :scale .25
[[file:./media/images/2023-04-15_19-52-50_screenshot.png]]

** Further Reading
- Al Sweigart: "Automate the Boring Stuff with Python"\\
  isbn: 978-1-593-27992-9
- Lee Vaughan: "Python Tools for Scientists"\\
  isbn: 978-1-718-50266-6
- Vince Buffalo: "Bioinformatics Data Skills"\\
  isbn: 978-1-449-36737-4
- Claus O. Wilke: "Fundamentals of Data Visualization"\\
  isbn: 978-1-492-03108-6


** Bibliography
:PROPERTIES:
:BEAMER_opt: shrink=10
:END:
#+begin_src bibtex :exports none :tangle ref.bib 
@misc{ MS_Excel_Spec,
title = {Excel specifications and limits},
author = {"Microsoft"},
month = {May},
year = {2023},
howpublished = {\url{https://support.microsoft.com/en-au/office/excel-specifications-and-limits-1672b34d-7043-467e-8e27-269d656771c3}},
note = {No publish date listed (Accessed 5/27/23)}
},
}
@misc{ Lewis_d_2021,
  author       = {Dyani Lewis},
  title        = {Autocorrect errors in Excel still creating genomics headache},
  howpublished = {\url{https://www.nature.com/articles/d41586-021-02211-4}},
  month        = {August},
  year         = {2021},
  note         = {Behind paywall (Accessed 5/27/23)}
}
@misc{ Carrigan_K_2023,
  author       = {Kellie Carrigan},
  title        = {Sanguine, a New Data Visualization Tool, Predicts Transfusion Needs and Provides Risk-Adjusted Benchmarking to Improve Patient Outcomes},
  howpublished = {\url{https://www.aruplab.com/magnify23/sanguine-new-data-visualization-tool-predicts-transfusion-needs}},
  month        = {March},
  year         = {2023},
  note         = {(Accessed 5/37/23)}
}
@misc{ Toledo_C_2012,
  author       = {Chelsea Toledo and Kirstie Saltsman},
  title        = {Genetics by the Numbers},
  howpublished = {\url{https://nigms.nih.gov/education/Inside-Life-Science/Pages/Genetics-by-the-Numbers.aspx}},
  month        = {June},
  year         = {2012},
  note         = {(Accessed 5/27/23)}
}
@misc{ Armitage_H_2012,
  author       = {Hanae Armitage},
  title        = {Fastest DNA sequencing technique helps undiagnosed patients find answers in mere hours},
  howpublished = {\url{https://med.stanford.edu/news/all-news/2022/01/dna-sequencing-technique.html}},
  month        = {January},
  year         = {2012},
  note         = {(Accessed 5/27/23)}
}
#+end_src


[[bibliography:/home/delta/agcloud/org/ref.bib]]
[[bibliographystyle:aasjournal]]

* Links                                                            :noexport:

[[id:24586-3012-4104-b65b-bf2a2e526a18][Roam Index]]

[[id:da153c54-5934-4b5b-90c0-9b7e0dab9cd9][Python]]

[[id:c1622e03-0f6e-47d4-be82-8eea88c4dc3f][Matplotlib]]:
 - https://matplotlib.org/stable/users/index.html
 - https://matplotlib.org/stable/tutorials/index.html
 - https://matplotlib.org/stable/plot_types/index.html
 - https://matplotlib.org/stable/api/index.html

[[id:6550f037-b51e-4e62-bbab-e1874c23ba5e][numpy]]

[[id:a624a7ff-29e5-4796-93ec-a271fee0acb4][Pandas]]


   https://www.aruplab.com/magnify23/sanguine-new-data-visualization-tool-predicts-transfusion-needs

[[id:9b0f7c69-04be-4aef-9ccc-f83f9294c91c][Bioinformatics Data Skills (Vince Buffalo)]]

[[id:0c64f7dd-7999-46d6-a538-9e31da3a6541][ModelingAndSimulationInPython]]

[[id:163a9579-1301-4e9d-a388-73b9ffe71ced][Scipy]]

https://orgmode.org/worg/exporters/beamer/tutorial.html
https://texdoc.org/serve/beamer/0
https://en.wikipedia.org/wiki/List_of_programming_languages

https://nigms.nih.gov/education/Inside-Life-Science/Pages/Genetics-by-the-Numbers.aspx

https://med.stanford.edu/news/all-news/2022/01/dna-sequencing-technique.html

https://pbs.twimg.com/media/FspnKDKaEAACpQi?format=jpg&name=small

https://chartio.com/learn/business-intelligence/5-data-visualization-best-practices/

https://www.nature.com/articles/d41586-021-02211-4
